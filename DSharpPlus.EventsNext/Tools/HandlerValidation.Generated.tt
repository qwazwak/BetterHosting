<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ include file="../../DiscordEventsTemplateBase.tt" #>
using System;
using System.Collections.Generic;
using DSharpPlus.EventsNext.Entities;

<#=AutomaticNamespaceLine#>

internal static partial class HandlerValidation
{
    private static partial HashSet<Type> InitHandlerInterfaces() => new()
    {
<# foreach(EventNaming naming in EventsList) { #>
        typeof(<#=naming.InterfaceName#>),

<# } #>
    };

    internal static partial bool IsExactInterface<TInterface>() where TInterface : IDiscordEventHandler
    {
<# foreach(EventNaming naming in EventsList) { #>
        if(typeof(TInterface) == typeof(<#=naming.InterfaceName#>))
            return true;
<# } #>
        else
            return false;
    }

    internal static partial bool IsExactInterface(Type interfaceType)
    {
        ArgumentNullException.ThrowIfNull(interfaceType);
<# foreach(EventNaming naming in EventsList) { #>
        if(interfaceType == typeof(<#=naming.InterfaceName#>))
            return true;
<# } #>
        else
            return false;
    }
}