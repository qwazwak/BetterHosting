<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="..\DiscordEventsTemplateBase.tt" #>
<#@ assembly name="System.Core" #>
using DSharpPlus.BetterHosting.EventsNext.Services;
using Microsoft.Extensions.DependencyInjection;

<#=AutomaticNamespaceLine#>

public static partial class RegistrationExtensions
{
    public static partial IServiceCollection AutoRegisterHandler<TImplementation>(this IServiceCollection services) where TImplementation : class, IDiscordEventHandler
    {
<# foreach(EventNaming naming in EventsList) { #>
        if (typeof(TImplementation).IsAssignableTo(typeof(<#=naming.InterfaceName#>)))
            services.AddEventHandlers<<#=naming.InterfaceName#>>().RegisterHandler(typeof(TImplementation));
<#} #>
        return services;
    }
<# foreach(EventNaming naming in EventsList) { #>
    /// <summary>
    /// Gets a builder that forwards handler addition calls for the <see cref="DiscordShardedClient.<#=naming.EventName#>"/> to the underlying service collection
    /// </summary>
    /// <remarks>Handlers must fufill the <see cref="<#=naming.InterfaceName#>"/> interface</remarks>
    /// <inheritdoc cref="RegistrationExtensions.AddEventHandlers{T}"/>
    public static RegistrationBuilder<<#=naming.InterfaceName#>> Add<#=naming.EventName#>Handlers(this IServiceCollection services) => services.AddEventHandlers<<#=naming.InterfaceName#>>();
<#} #>
<# foreach(EventNaming naming in EventsList) { #>

    /// <summary>
    /// Shorthand to register <typeparamref name="THandler"/> to the event <see cref="DiscordShardedClient.<#=naming.EventName#>"/>
    /// </summary>
    /// <typeparam name="THandler">The <see cref="IDiscordEventHandler{TArgs}"/> to register for the event</typeparam>
    public static IServiceCollection Add<#=naming.WithHandlerSuffix#><THandler>(IServiceCollection services) where THandler : class, <#=naming.InterfaceName#>
    {
        services.AddEventHandlers<<#=naming.InterfaceName#>>().RegisterHandler<THandler>();
        return services;
    }

<#}#>
}