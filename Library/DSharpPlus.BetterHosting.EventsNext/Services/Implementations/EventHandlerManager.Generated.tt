<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="../../DiscordEventsBase.tt" #>
<#@ assembly name="System.Core" #>
using DSharpPlus.EventArgs;
using DSharpPlus.AsyncEvents;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using DSharpPlus.BetterHosting.Services;
using System.Diagnostics.CodeAnalysis;

<#=AutomaticNamespaceLine#>

<#
foreach(EventNaming naming in EventsList)
{
    string className = naming.WithHandlerSuffix + "Manager";
    List<(string type, string name)> constuctorArgs = new()
    {
        ($"ILogger<{className}>", "logger"),
        ($"HandlerRegistry<{naming.InterfaceName}>", "registry"),
        ("[FromKeyedServices(NamedServices.RootServiceProvider)] IKeyedServiceProvider", "provider")
    };

#>

[ExcludeFromCodeCoverage]
internal partial class <#=className#> : EventHandlerManager<<#=naming.InterfaceName#>, <#=naming.ArgumentType#>>
{    
    public <#=className#>(<#=string.Join(", ", constuctorArgs.Select(p => $"{p.type} {p.name}"))#>) : base(<#=string.Join(", ", constuctorArgs.Select(p => p.name))#>) { }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected sealed override void BindHandler(DiscordShardedClient client, AsyncEventHandler<DiscordClient, <#=naming.ArgumentType#>> handler) => client.<#=naming.EventName#> += handler;
    
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected sealed override void UnbindHandler(DiscordShardedClient client, AsyncEventHandler<DiscordClient, <#=naming.ArgumentType#>> handler) => client.<#=naming.EventName#> -= handler;

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    protected sealed override ValueTask Invoke(<#=naming.InterfaceName#> handler, DiscordClient sender, <#=naming.ArgumentType#> args) => handler.<#=naming.MethodName#>(sender, args);
}
<#}#>