<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="..\DiscordEventsBase.tt" #>
using System.Threading.Tasks;
using DSharpPlus.AsyncEvents;
using DSharpPlus.BetterHosting.EventsNext.Services;
using DSharpPlus.EventArgs;

<#=AutomaticNamespaceLine#>

internal partial class AutoEventHandlerAdapter<TInterface, TArgument>
{
    public static partial void BindHandler(DiscordShardedClient client, AsyncEventHandler<DiscordClient, TArgument> handler)
    {
        <#= IfInterface(FirstEvent) #>
            client.<#=FirstEvent.EventName#> += (AsyncEventHandler<DiscordClient, <#=FirstEvent.ArgumentType#>>)handler;
<# foreach(EventNaming naming in SkipFirst) { #>
        else <#= IfInterface(naming) #>
            client.<#=naming.EventName#> += (AsyncEventHandler<DiscordClient, <#=naming.ArgumentType#>>)handler;
<# } #>
        else
            ThrowInvalid_AlreadyVerified();
    }

    public static partial void UnbindHandler(DiscordShardedClient client, AsyncEventHandler<DiscordClient, TArgument> handler)
    {
        <#= IfInterface(FirstEvent) #>
            client.<#=FirstEvent.EventName#> -= (AsyncEventHandler<DiscordClient, <#=FirstEvent.ArgumentType#>>)handler;
<# foreach(EventNaming naming in SkipFirst) { #>
        else <#= IfInterface(naming) #>
            client.<#=naming.EventName#> -= (AsyncEventHandler<DiscordClient, <#=naming.ArgumentType#>>)handler;
<# } #>
        else
            ThrowInvalid_AlreadyVerified();
    }


    public static partial ValueTask Invoke(TInterface handler, DiscordClient sender, TArgument eventArg)
    {
        <#= IfInterface(FirstEvent) #>
            return ((<#=FirstEvent.InterfaceName#>)handler).<#=FirstEvent.MethodName#>(sender, (<#=FirstEvent.ArgumentType#>)(DiscordEventArgs)eventArg);
<# foreach(EventNaming naming in SkipFirst) { #>
        else <#= IfInterface(naming) #>
            return ((<#=naming.InterfaceName#>)handler).<#=naming.MethodName#>(sender, (<#=naming.ArgumentType#>)(DiscordEventArgs)eventArg);
<# } #>
        ThrowInvalid_AlreadyVerified();
        return default!;
    }
}
<#+
    public string IfInterface(EventNaming naming) => $"if (typeof(TInterface) == typeof({naming.InterfaceName}))";
#>
