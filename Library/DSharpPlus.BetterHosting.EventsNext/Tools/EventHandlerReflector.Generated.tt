<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="../DiscordEventsBase.tt" #>
<#@ assembly name="System.Core" #>
#if false
using DSharpPlus.EventArgs;
using System.Diagnostics;
using DSharpPlus.BetterHosting.EventsNext.Services;
using System;
using DSharpPlus.AsyncEvents;
using System.Threading.Tasks;

<#=AutomaticNamespaceLine#>

internal static partial class EventHandlerReflector
{
    public static partial ValueTask AutoCallEventHandler<TInterface>(IDiscordEventHandler handler, DiscordClient sender, DiscordEventArgs args) where TInterface : IDiscordEventHandler
    {
<# foreach(EventNaming naming in EventsList) { #>
        if(typeof(TInterface) == typeof(<#=naming.InterfaceName#>))
        {
            <#=naming.InterfaceName#> castHandler = (<#=naming.InterfaceName#>)handler;
            <#=naming.ArgumentType#> castArgs = (<#=naming.ArgumentType#>)args;
            return castHandler.<#=naming.MethodName#>(sender, castArgs);
        }
        else
<#}#>
        {
            Debug.Fail($"Not a supported type: {typeof(TInterface).Name}");
            return ValueTask.FromException(new InvalidOperationException($"Handler of type {typeof(TInterface).Name} not supported"));
        }
    }

    public static partial void BindEvent<THandlerInterface, TArgument>(DiscordShardedClient client, AsyncEventHandler<DiscordClient, TArgument> handler) where THandlerInterface : IDiscordEventHandler<TArgument> where TArgument : DiscordEventArgs
    {
<# foreach(EventNaming naming in EventsList) { #>
        if(typeof(THandlerInterface) == typeof(<#=naming.InterfaceName#>))
        {
            Debug.Assert(typeof(TArgument) == typeof(<#=naming.ArgumentType#>));
            client.<#=naming.EventName#> += (AsyncEventHandler<DiscordClient, <#=naming.ArgumentType#>>)handler;
            return;
        }
        else
<#}#>
        {
            Debug.Fail($"Not a supported type: {typeof(THandlerInterface).Name}");
            throw new InvalidOperationException($"Handler of type {typeof(THandlerInterface).Name} not supported");
        }
    }

    public static partial void UnbindEvent<THandlerInterface, TArgument>(DiscordShardedClient client, AsyncEventHandler<DiscordClient, TArgument> handler) where THandlerInterface : IDiscordEventHandler<TArgument> where TArgument : DiscordEventArgs
    {
<# foreach(EventNaming naming in EventsList) { #>
        if(typeof(THandlerInterface) == typeof(<#=naming.InterfaceName#>))
        {
            Debug.Assert(typeof(TArgument) == typeof(<#=naming.ArgumentType#>));
            client.<#=naming.EventName#> -= (AsyncEventHandler<DiscordClient, <#=naming.ArgumentType#>>)handler;
            return;
        }
        else
<#}#>
        {
            Debug.Fail($"Not a supported type: {typeof(THandlerInterface).Name}");
            throw new InvalidOperationException($"Handler of type {typeof(THandlerInterface).Name} not supported");
        }
    }
}
#endif