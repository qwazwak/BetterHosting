using System;
using System.Linq;
using DSharpPlus.BetterHosting.EventsNext.Services;
using DSharpPlus.EventArgs;

namespace UnitTests.DSharpPlus.BetterHosting.EventsNext;

public static class EventsNextHandlersTestData
{
    public static readonly Type[] EventHandlerBaseInterface = new[] { typeof(IDiscordEventHandler) };
    public static readonly Type[] EventArgTypes = new[]
    {
        typeof(SocketErrorEventArgs),
        typeof(SocketEventArgs),
        typeof(SocketCloseEventArgs),
        typeof(SessionReadyEventArgs),
        typeof(SessionReadyEventArgs),
        typeof(HeartbeatEventArgs),
        typeof(ZombiedEventArgs),
        typeof(ApplicationCommandPermissionsUpdatedEventArgs),
        typeof(ChannelCreateEventArgs),
        typeof(ChannelUpdateEventArgs),
        typeof(ChannelDeleteEventArgs),
        typeof(DmChannelDeleteEventArgs),
        typeof(ChannelPinsUpdateEventArgs),
        typeof(GuildCreateEventArgs),
        typeof(GuildCreateEventArgs),
        typeof(GuildUpdateEventArgs),
        typeof(GuildDeleteEventArgs),
        typeof(GuildDeleteEventArgs),
        typeof(GuildDownloadCompletedEventArgs),
        typeof(GuildEmojisUpdateEventArgs),
        typeof(GuildStickersUpdateEventArgs),
        typeof(GuildIntegrationsUpdateEventArgs),
        typeof(GuildAuditLogCreatedEventArgs),
        typeof(ScheduledGuildEventCreateEventArgs),
        typeof(ScheduledGuildEventUpdateEventArgs),
        typeof(ScheduledGuildEventDeleteEventArgs),
        typeof(ScheduledGuildEventCompletedEventArgs),
        typeof(ScheduledGuildEventUserAddEventArgs),
        typeof(ScheduledGuildEventUserRemoveEventArgs),
        typeof(GuildBanAddEventArgs),
        typeof(GuildBanRemoveEventArgs),
        typeof(GuildMemberAddEventArgs),
        typeof(GuildMemberRemoveEventArgs),
        typeof(GuildMemberUpdateEventArgs),
        typeof(GuildMembersChunkEventArgs),
        typeof(GuildRoleCreateEventArgs),
        typeof(GuildRoleUpdateEventArgs),
        typeof(GuildRoleDeleteEventArgs),
        typeof(InviteCreateEventArgs),
        typeof(InviteDeleteEventArgs),
        typeof(MessageCreateEventArgs),
        typeof(MessageAcknowledgeEventArgs),
        typeof(MessageUpdateEventArgs),
        typeof(MessageDeleteEventArgs),
        typeof(MessageBulkDeleteEventArgs),
        typeof(MessageReactionAddEventArgs),
        typeof(MessageReactionRemoveEventArgs),
        typeof(MessageReactionsClearEventArgs),
        typeof(MessageReactionRemoveEmojiEventArgs),
        typeof(PresenceUpdateEventArgs),
        typeof(UserSettingsUpdateEventArgs),
        typeof(UserUpdateEventArgs),
        typeof(VoiceStateUpdateEventArgs),
        typeof(VoiceServerUpdateEventArgs),
        typeof(ThreadCreateEventArgs),
        typeof(ThreadUpdateEventArgs),
        typeof(ThreadDeleteEventArgs),
        typeof(ThreadListSyncEventArgs),
        typeof(ThreadMemberUpdateEventArgs),
        typeof(ThreadMembersUpdateEventArgs),
        typeof(IntegrationCreateEventArgs),
        typeof(IntegrationUpdateEventArgs),
        typeof(IntegrationDeleteEventArgs),
        typeof(StageInstanceCreateEventArgs),
        typeof(StageInstanceUpdateEventArgs),
        typeof(StageInstanceDeleteEventArgs),
        typeof(InteractionCreateEventArgs),
        typeof(ComponentInteractionCreateEventArgs),
        typeof(ModalSubmitEventArgs),
        typeof(ContextMenuInteractionCreateEventArgs),
        typeof(TypingStartEventArgs),
        typeof(UnknownEventArgs),
        typeof(WebhooksUpdateEventArgs),
        typeof(ClientErrorEventArgs),
        typeof(AutoModerationRuleCreateEventArgs),
        typeof(AutoModerationRuleUpdateEventArgs),
        typeof(AutoModerationRuleDeleteEventArgs),
        typeof(AutoModerationRuleExecuteEventArgs)
    };
    
    public static readonly Type[] GenericEventHandlerTypes = EventArgTypes.Select(a => typeof(IDiscordEventHandler<>).MakeGenericType(a)).ToArray();
}
